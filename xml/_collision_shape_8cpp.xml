<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_collision_shape_8cpp" kind="file">
    <compoundname>CollisionShape.cpp</compoundname>
    <includes refid="_collision_shape_8h" local="yes">CollisionShape.h</includes>
    <includes local="no">ngl/Obj.h</includes>
    <includes local="no">ngl/NGLStream.h</includes>
    <incdepgraph>
      <node id="1875">
        <label>ngl/Types.h</label>
      </node>
      <node id="1871">
        <label>CollisionShape.h</label>
        <link refid="_collision_shape_8h"/>
        <childnode refid="1872" relation="include">
        </childnode>
        <childnode refid="1873" relation="include">
        </childnode>
        <childnode refid="1874" relation="include">
        </childnode>
        <childnode refid="1875" relation="include">
        </childnode>
        <childnode refid="1876" relation="include">
        </childnode>
      </node>
      <node id="1876">
        <label>string</label>
      </node>
      <node id="1870">
        <label>CollisionShape.cpp</label>
        <link refid="CollisionShape.cpp"/>
        <childnode refid="1871" relation="include">
        </childnode>
        <childnode refid="1877" relation="include">
        </childnode>
        <childnode refid="1878" relation="include">
        </childnode>
      </node>
      <node id="1877">
        <label>ngl/Obj.h</label>
      </node>
      <node id="1873">
        <label>unordered_map</label>
      </node>
      <node id="1872">
        <label>btBulletDynamicsCommon.h</label>
      </node>
      <node id="1878">
        <label>ngl/NGLStream.h</label>
      </node>
      <node id="1874">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_collision_shape_8h" kindref="compound">CollisionShape.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ngl/Obj.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ngl/NGLStream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="class_collision_shape_1a419073488476916f9dba2dd97ae2bf76" refkind="member"><highlight class="normal"><ref refid="class_collision_shape" kindref="compound">CollisionShape</ref><sp/>*<ref refid="class_collision_shape_1a419073488476916f9dba2dd97ae2bf76" kindref="member">CollisionShape::instance</ref>()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>C++<sp/>11<sp/>we<sp/>use<sp/>this<sp/>to<sp/>avoid<sp/>having<sp/>to<sp/>do<sp/>a<sp/>double<sp/>check<sp/>lock<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_collision_shape" kindref="compound">CollisionShape</ref><sp/>s_instance;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;s_instance;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="class_collision_shape_1a3da0cfb413abcabe3195479a61df6344" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_collision_shape_1a3da0cfb413abcabe3195479a61df6344" kindref="member">CollisionShape::addMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;_objFilePath)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//read<sp/>the<sp/>obj<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>ngl::Obj<sp/>mesh(_objFilePath);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>dynamic<sp/>rigidbody</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>btConvexHullShape*<sp/><sp/>shape<sp/>=<sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btConvexHullShape();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points=mesh.getVertexList();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>points)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;addPoint(btVector3(p.m_x,p.m_y,p.m_z));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>[_name].reset(shape);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25" refid="class_collision_shape_1a09565f981c32edb1cc1100e0d314ad3c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_collision_shape_1a09565f981c32edb1cc1100e0d314ad3c" kindref="member">CollisionShape::addLevelMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;_objFilePath)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//load<sp/>in<sp/>the<sp/>obj<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>ngl::Obj<sp/>mesh(_objFilePath);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//creates<sp/>a<sp/>triangle<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>btTriangleMesh<sp/>*mTriMesh<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btTriangleMesh();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>face<sp/>list<sp/>and<sp/>iterate<sp/>through<sp/>to<sp/>load<sp/>in<sp/>triangles<sp/>to<sp/>the<sp/>triangle<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>faceList=mesh.getFaceList();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>face:<sp/>faceList)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>to<sp/>btVector3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>btVector3<sp/>vertex_1,vertex_2,vertex_3;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ngl::Vec3<sp/>v_1<sp/>=<sp/>mesh.getVertexAtIndex(face.m_vert[0]);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ngl::Vec3<sp/>v_2<sp/>=<sp/>mesh.getVertexAtIndex(face.m_vert[1]);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ngl::Vec3<sp/>v_3<sp/>=<sp/>mesh.getVertexAtIndex(face.m_vert[2]);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_1.setX(v_1.m_x);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_1.setY(v_1.m_y);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_1.setZ(v_1.m_z);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_2.setX(v_2.m_x);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_2.setY(v_2.m_y);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_2.setZ(v_2.m_z);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_3.setX(v_3.m_x);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_3.setY(v_3.m_y);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_3.setZ(v_3.m_z);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//load<sp/>to<sp/>triangle<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mTriMesh-&gt;addTriangle(vertex_1,vertex_2,vertex_3);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//load<sp/>to<sp/>the<sp/>triangle<sp/>mesh<sp/>to<sp/>a<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>btCollisionShape<sp/>*mTriMeshShape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btBvhTriangleMeshShape(mTriMesh,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>[_name].reset(mTriMeshShape);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59" refid="class_collision_shape_1a502ae0e27451fe9dfb65451dd424d645" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_collision_shape_1a502ae0e27451fe9dfb65451dd424d645" kindref="member">CollisionShape::addSphere</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>_name,<sp/>ngl::Real<sp/>_rad)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btSphereShape(btScalar(_rad/2.0));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>[_name].reset(shape);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_collision_shape_1add599b7da4202fb060a1060f020d4c9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_collision_shape_1add599b7da4202fb060a1060f020d4c9f" kindref="member">CollisionShape::addBox</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>_name,<sp/>ngl::Real<sp/>_w,<sp/>ngl::Real<sp/>_h,<sp/>ngl::Real<sp/>_d)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btBoxShape(btVector3(_w/2.0,_h/2.0,_d/2.0));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>[_name].reset(shape);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="class_collision_shape_1a995aa2c673cca8b4a11b220c3f1f1706" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_collision_shape_1a995aa2c673cca8b4a11b220c3f1f1706" kindref="member">CollisionShape::addCapsule</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>_name,<sp/>ngl::Real<sp/>_rad,<sp/>ngl::Real<sp/>_height)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><sp/>btCapsuleShape(_rad,_height);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>[_name].reset(shape);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76" refid="class_collision_shape_1aefc52093702cbb1c6f8c277758a10adf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_collision_shape_1aefc52093702cbb1c6f8c277758a10adf" kindref="member">CollisionShape::addCylinder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>_name,<sp/>ngl::Real<sp/>_rad,<sp/>ngl::Real<sp/>_height)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><sp/>btCylinderShapeZ(btVector3(_rad,_height/2.0,_rad));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>[_name].reset(shape);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="class_collision_shape_1abc87d7f44b86015dc0e5cbacbf414c35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_collision_shape_1abc87d7f44b86015dc0e5cbacbf414c35" kindref="member">CollisionShape::addCone</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>_name,<sp/>ngl::Real<sp/>_rad,<sp/>ngl::Real<sp/>_height)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><sp/>btConeShapeZ(_rad,_height);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>[_name].reset(shape);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87" refid="class_collision_shape_1ac2fc5b4b07d9b6f6551d1e021e65626e" refkind="member"><highlight class="normal">btCollisionShape*<sp/><ref refid="class_collision_shape_1ac2fc5b4b07d9b6f6551d1e021e65626e" kindref="member">CollisionShape::getShape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;_name)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>btCollisionShape<sp/>*shape=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shapeIt=<ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>.find(_name);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shapeIt!=<ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>.end())</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shape=shapeIt-&gt;second.get();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98" refid="class_collision_shape_1a577a537932f6650525bd52937ed597ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_collision_shape_1a577a537932f6650525bd52937ed597ab" kindref="member">CollisionShape::printShapeMap</ref>()</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//print<sp/>shapes<sp/>contained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Shapes<sp/>contained:&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="class_collision_shape_1a10d56edfe63d8c5b800be90f2dc8c37b" kindref="member">m_shapes</ref>.end();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/i7257092/may_01/night_master/LevelHeadsCVA3/src/CollisionShape.cpp"/>
  </compounddef>
</doxygen>
