<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_text_8cpp" kind="file">
    <compoundname>Text.cpp</compoundname>
    <includes refid="_text_8h" local="yes">Text.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">ngl/ShaderLib.h</includes>
    <includes local="yes">SDL.h</includes>
    <includes local="yes">SDL_ttf.h</includes>
    <incdepgraph>
      <node id="2559">
        <label>Text.cpp</label>
        <link refid="Text.cpp"/>
        <childnode refid="2560" relation="include">
        </childnode>
        <childnode refid="2566" relation="include">
        </childnode>
        <childnode refid="2567" relation="include">
        </childnode>
        <childnode refid="2568" relation="include">
        </childnode>
        <childnode refid="2569" relation="include">
        </childnode>
      </node>
      <node id="2569">
        <label>SDL_ttf.h</label>
      </node>
      <node id="2568">
        <label>SDL.h</label>
      </node>
      <node id="2562">
        <label>ngl/VertexArrayObject.h</label>
      </node>
      <node id="2563">
        <label>ngl/Colour.h</label>
      </node>
      <node id="2561">
        <label>ngl/Vec2.h</label>
      </node>
      <node id="2564">
        <label>string</label>
      </node>
      <node id="2567">
        <label>ngl/ShaderLib.h</label>
      </node>
      <node id="2565">
        <label>map</label>
      </node>
      <node id="2560">
        <label>Text.h</label>
        <link refid="_text_8h"/>
        <childnode refid="2561" relation="include">
        </childnode>
        <childnode refid="2562" relation="include">
        </childnode>
        <childnode refid="2563" relation="include">
        </childnode>
        <childnode refid="2564" relation="include">
        </childnode>
        <childnode refid="2565" relation="include">
        </childnode>
      </node>
      <node id="2566">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_text_8cpp_1aa1f6e37d2b388fc3b779638bc3fb714c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int nearestPowerOfTwo</definition>
        <argsstring>(unsigned int _num)</argsstring>
        <name>nearestPowerOfTwo</name>
        <param>
          <type>unsigned int</type>
          <declname>_num</declname>
        </param>
        <briefdescription>
<para>code taken from here <ulink url="http://jeffreystedfast.blogspot.com/2008/06/calculating-nearest-power-of-2.html">http://jeffreystedfast.blogspot.com/2008/06/calculating-nearest-power-of-2.html</ulink> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_num</parametername>
</parameternamelist>
<parameterdescription>
<para>the number we wish to get the nearest power from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/i7257092/may_01/night_master/LevelHeadsCVA3/src/Text.cpp" line="32" column="1" bodyfile="/home/i7257092/may_01/night_master/LevelHeadsCVA3/src/Text.cpp" bodystart="32" bodyend="41"/>
        <referencedby refid="class_text_1a5454ef14fc670f5ef68bdbe2fe2fad3b" compoundref="_text_8cpp" startline="45" endline="213">Text::Text</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>2011<sp/>Jon<sp/>Macey</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_text_8h" kindref="compound">Text.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ngl/ShaderLib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SDL.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SDL_ttf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight><highlight class="comment">//<sp/>OpenGL<sp/>needs<sp/>textures<sp/>to<sp/>be<sp/>in<sp/>powers<sp/>of<sp/>two,<sp/>this<sp/>function<sp/>will<sp/>get<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nearest<sp/>power<sp/>of<sp/>two<sp/>to<sp/>the<sp/>current<sp/>value<sp/>passed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="_text_8cpp_1aa1f6e37d2b388fc3b779638bc3fb714c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_text_8cpp_1aa1f6e37d2b388fc3b779638bc3fb714c" kindref="member">nearestPowerOfTwo</ref><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_num<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>(j<sp/>=<sp/>_num<sp/>&amp;<sp/>0xFFFF0000)<sp/>||<sp/>(j<sp/>=<sp/>_num);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>(k<sp/>=<sp/>j<sp/>&amp;<sp/>0xFF00FF00)<sp/>||<sp/>(k<sp/>=<sp/>j);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>(j<sp/>=<sp/>k<sp/>&amp;<sp/>0xF0F0F0F0)<sp/>||<sp/>(j<sp/>=<sp/>k);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>(k<sp/>=<sp/>j<sp/>&amp;<sp/>0xCCCCCCCC)<sp/>||<sp/>(k<sp/>=<sp/>j);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>(j<sp/>=<sp/>k<sp/>&amp;<sp/>0xAAAAAAAA)<sp/>||<sp/>(j<sp/>=<sp/>k);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>citation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="class_text_1a5454ef14fc670f5ef68bdbe2fe2fad3b" refkind="member"><highlight class="normal"><ref refid="class_text_1a5454ef14fc670f5ef68bdbe2fe2fad3b" kindref="member">Text::Text</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;_f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_size)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>TTF_Init();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>TTF_Font<sp/>*font<sp/>=<sp/>TTF_OpenFont(_f.c_str(),<sp/>_size<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>SDL_Color<sp/>color<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,0<sp/>};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(font<sp/>==0<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>loading<sp/>font<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;TTF_GetError()&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a822c103b79ef8d6a36c81a14cd038e07" kindref="member">exit</ref>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>first<sp/>we<sp/>grab<sp/>the<sp/>font<sp/>metric<sp/>of<sp/>the<sp/>font<sp/>being<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>allows<sp/>us<sp/>to<sp/>get<sp/>the<sp/>height<sp/>which<sp/>should<sp/>be<sp/>the<sp/>same<sp/>for<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fonts<sp/>of<sp/>the<sp/>same<sp/>class<sp/>as<sp/>this<sp/>is<sp/>the<sp/>total<sp/>glyph<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fontHeight=TTF_FontHeight(font);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Font<sp/>height<sp/>is<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;fontHeight&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>for<sp/>all<sp/>basic<sp/>keyboard<sp/>chars<sp/>we<sp/>will<sp/>use<sp/>space<sp/>to<sp/>~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>ngl::Really<sp/>change<sp/>this<sp/>to<sp/>unicode<sp/>at<sp/>some<sp/>stage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>startChar=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>endChar=</highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Most<sp/>OpenGL<sp/>cards<sp/>need<sp/>textures<sp/>to<sp/>be<sp/>in<sp/>powers<sp/>of<sp/>2<sp/>(128x512<sp/>1024X1024<sp/>etc<sp/>etc)<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>safe<sp/>we<sp/>will<sp/>conform<sp/>to<sp/>this<sp/>and<sp/>calculate<sp/>the<sp/>nearest<sp/>power<sp/>of<sp/>2<sp/>for<sp/>the<sp/>glyph<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>do<sp/>the<sp/>same<sp/>for<sp/>each<sp/>width<sp/>of<sp/>the<sp/>font<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>heightPow2=<ref refid="_text_8cpp_1aa1f6e37d2b388fc3b779638bc3fb714c" kindref="member">nearestPowerOfTwo</ref>(fontHeight);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>now<sp/>going<sp/>to<sp/>create<sp/>a<sp/>texture<sp/>/<sp/>billboard<sp/>for<sp/>each<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>will<sp/>be<sp/>the<sp/>same<sp/>height<sp/>but<sp/>will<sp/>possibly<sp/>have<sp/>different<sp/>widths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>some<sp/>of<sp/>the<sp/>fonts<sp/>will<sp/>be<sp/>the<sp/>same<sp/>width,<sp/>to<sp/>save<sp/>VAO<sp/>space<sp/>we<sp/>will<sp/>only<sp/>create</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>vao<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>one<sp/>of<sp/>the<sp/>set<sp/>width.<sp/>To<sp/>do<sp/>this<sp/>we<sp/>use<sp/>the<sp/>has<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>std::map<sp/>&lt;int,ngl::VertexArrayObject<sp/>*&gt;<sp/>widthVAO;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=startChar;<sp/>c&lt;=endChar;<sp/>++c)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_font_char" kindref="compound">FontChar</ref><sp/>fc;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>width<sp/>of<sp/>the<sp/>font<sp/>and<sp/>calculate<sp/>the<sp/>^2<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TTF_GlyphMetrics(TTF_Font<sp/>*font,<sp/>Uint16<sp/>ch,<sp/>int<sp/>*minx,<sp/>int<sp/>*maxx,<sp/>int<sp/>*miny,<sp/>int<sp/>*maxy,<sp/>int<sp/>*advance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cc[2];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(cc,</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,c);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>a<sp/>null<sp/>terminated<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>cc[1]=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>TTF_SizeText(font,cc,&amp;width,&amp;height);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>widthPow2=<ref refid="_text_8cpp_1aa1f6e37d2b388fc3b779638bc3fb714c" kindref="member">nearestPowerOfTwo</ref>(width);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>set<sp/>the<sp/>texture<sp/>co-ords<sp/>for<sp/>our<sp/>quad<sp/>it<sp/>is<sp/>a<sp/>simple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triangle<sp/>billboard<sp/>with<sp/>tex-cords<sp/>as<sp/>shown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>s0/t0<sp/><sp/>----<sp/>s1,t0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|\<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>\|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>s0,t1<sp/><sp/>----<sp/>s1,t1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>quad<sp/>will<sp/>have<sp/>the<sp/>same<sp/>s0<sp/>and<sp/>the<sp/>range<sp/>s0-s1<sp/>==<sp/>0.0<sp/>-&gt;<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>ngl::Real<sp/>s0=0.0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>now<sp/>need<sp/>to<sp/>scale<sp/>the<sp/>tex<sp/>cord<sp/>to<sp/>it<sp/>ranges<sp/>from<sp/>0-1<sp/>based<sp/>on<sp/>the<sp/>coverage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>glyph<sp/>and<sp/>not<sp/>the<sp/>power<sp/>of<sp/>2<sp/>texture<sp/>size.<sp/>This<sp/>will<sp/>ensure<sp/>that<sp/>kerns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>/<sp/>ligatures<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>ngl::Real<sp/>s1=width*1.0/width;<sp/></highlight><highlight class="comment">//<sp/>use<sp/>this<sp/>on<sp/>older<sp/>machines<sp/>widthPow2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>t0<sp/>will<sp/>always<sp/>be<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ngl::Real<sp/>t0=0.0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>scale<sp/>the<sp/>height<sp/>so<sp/>we<sp/>only<sp/>get<sp/>coverage<sp/>of<sp/>the<sp/>glyph<sp/>as<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>ngl::Real<sp/>t1=height*1.0/height;<sp/></highlight><highlight class="comment">//<sp/>use<sp/>this<sp/>on<sp/>older<sp/>gpus<sp/>heightPow2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>store<sp/>the<sp/>font<sp/>width<sp/>for<sp/>later<sp/>drawing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>fc.<ref refid="struct_font_char_1ad9a465bf2576f17d4123d440d1b4a6cb" kindref="member">width</ref>=width;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Surface*<sp/>msg<sp/>=<sp/>TTF_RenderText_Blended(<sp/>font,<sp/>cc,<sp/>color<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>needed<sp/>on<sp/>some<sp/>older<sp/>machines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SDL_Surface<sp/>*powerOfTwo=SDL_CreateRGBSurface(0,widthPow2,heightPow2,32,0,0,0,0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SDL_BlitSurface(msg,NULL,powerOfTwo,NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>create<sp/>the<sp/>OpenGL<sp/>texture<sp/>ID<sp/>and<sp/>bind<sp/>to<sp/>make<sp/>it<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenTextures(1,<sp/>&amp;fc.<ref refid="struct_font_char_1ae1075095d8060c578b87d6437eccec2c" kindref="member">textureID</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>fc.<ref refid="struct_font_char_1ae1075095d8060c578b87d6437eccec2c" kindref="member">textureID</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MAG_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MIN_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexImage2D(<sp/>GL_TEXTURE_2D,<sp/>0,<sp/>GL_RGBA,<sp/>msg-&gt;w,<sp/>msg-&gt;h,<sp/>0,<sp/>GL_RGBA,<sp/>GL_UNSIGNED_BYTE,<sp/>msg-&gt;pixels<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SDL_FreeSurface(powerOfTwo);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_FreeSurface(msg);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>image<sp/>in<sp/>in<sp/>RGBA<sp/>format<sp/>and<sp/>unsigned<sp/>byte<sp/>load<sp/>it<sp/>ready<sp/>for<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>glTexImage2D(GL_TEXTURE_2D,<sp/>0,<sp/>GL_RGBA,<sp/>widthTexture,<sp/>heightTexture,0,<sp/>GL_RGBA,<sp/>GL_UNSIGNED_BYTE,<sp/>data);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>delete<sp/>[]<sp/>data;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>have<sp/>a<sp/>Billboard<sp/>of<sp/>this<sp/>width<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!widthVAO.count(width))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>structure<sp/>is<sp/>used<sp/>by<sp/>the<sp/>VAO<sp/>to<sp/>store<sp/>the<sp/>data<sp/>to<sp/>be<sp/>uploaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>drawing<sp/>the<sp/>quad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">textVertData</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngl::Real<sp/>x;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngl::Real<sp/>y;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngl::Real<sp/>u;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngl::Real<sp/>v;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>creating<sp/>a<sp/>billboard<sp/>with<sp/>two<sp/>triangles<sp/>so<sp/>we<sp/>only<sp/>need<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6<sp/>verts,<sp/>(could<sp/>use<sp/>index<sp/>and<sp/>save<sp/>some<sp/>space<sp/>but<sp/>shouldn&apos;t<sp/>be<sp/>too<sp/>much<sp/>of<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>issue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textVertData<sp/>d[6];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>values<sp/>for<sp/>triangle<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[0].x=0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[0].y=0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[0].u=s0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[0].v=t0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[1].x=fc.<ref refid="struct_font_char_1ad9a465bf2576f17d4123d440d1b4a6cb" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[1].y=0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[1].u=s1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[1].v=t0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[2].x=0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[2].y=fontHeight;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[2].u=s0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[2].v=t1;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>values<sp/>for<sp/>triangle<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[3].x=0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[3].y=0+fontHeight;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[3].u=s0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[3].v=t1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[4].x=fc.<ref refid="struct_font_char_1ad9a465bf2576f17d4123d440d1b4a6cb" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[4].y=0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[4].u=s1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[4].v=t0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[5].x=fc.<ref refid="struct_font_char_1ad9a465bf2576f17d4123d440d1b4a6cb" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[5].y=fontHeight;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[5].u=s1;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[5].v=t1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>create<sp/>a<sp/>VAO<sp/>to<sp/>store<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngl::VertexArrayObject<sp/>*vao=ngl::VertexArrayObject::createVOA(GL_TRIANGLES);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>it<sp/>so<sp/>we<sp/>can<sp/>set<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vao-&gt;bind();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>vertex<sp/>data<sp/>(2<sp/>for<sp/>x,y<sp/>2<sp/>for<sp/>u,v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vao-&gt;setData(6*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(textVertData),d[0].x);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>set<sp/>the<sp/>attribute<sp/>pointer<sp/>to<sp/>be<sp/>0<sp/>(as<sp/>this<sp/>matches<sp/>vertIn<sp/>in<sp/>our<sp/>shader)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vao-&gt;setVertexAttributePointer(0,2,GL_FLOAT,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(textVertData),0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>now<sp/>create<sp/>another<sp/>set<sp/>of<sp/>data<sp/>(which<sp/>will<sp/>be<sp/>added<sp/>to<sp/>the<sp/>VAO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>case<sp/>the<sp/>UV<sp/>co-ords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>set<sp/>this<sp/>as<sp/>the<sp/>2nd<sp/>attribute<sp/>pointer<sp/>(1)<sp/>to<sp/>match<sp/>inUV<sp/>in<sp/>the<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vao-&gt;setVertexAttributePointer(1,2,GL_FLOAT,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(textVertData),2);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>say<sp/>how<sp/>many<sp/>indecis<sp/>to<sp/>be<sp/>rendered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vao-&gt;setNumIndices(6);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>unbind</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vao-&gt;unbind();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>vao<sp/>pointer<sp/>for<sp/>later<sp/>use<sp/>in<sp/>the<sp/>draw<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc.<ref refid="struct_font_char_1a890a0845ed36a0d9aa80eff184f76230" kindref="member">vao</ref>=vao;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>widthVAO[width]=vao;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fc.<ref refid="struct_font_char_1a890a0845ed36a0d9aa80eff184f76230" kindref="member">vao</ref>=widthVAO[width];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finally<sp/>add<sp/>the<sp/>element<sp/>to<sp/>the<sp/>map,<sp/>this<sp/>must<sp/>be<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thing<sp/>we<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_text_1a3fa2d5b1a68627c8415c500bd95ec353" kindref="member">m_characters</ref>[c]=fc;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;created<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;widthVAO.size()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>unique<sp/>billboards\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>a<sp/>default<sp/>colour<sp/>(black)<sp/>incase<sp/>user<sp/>forgets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="class_text_1ad898e1ff3c2221029c115ed5de7f1b72" kindref="member">setColour</ref>(0,0,0);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="class_text_1a6ec9d77b284824829150b8ebb436c358" kindref="member">setTransform</ref>(1.0,1.0);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="class_text_1a2d49e5c280e205125b149f7777ae30c7" refkind="member"><highlight class="normal"><ref refid="class_text_1a2d49e5c280e205125b149f7777ae30c7" kindref="member">Text::~Text</ref>()</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>dtor<sp/>should<sp/>clear<sp/>out<sp/>the<sp/>textures<sp/>and<sp/>remove<sp/>the<sp/>VAO&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>foreach(<sp/>FontChar<sp/>m,<sp/>m_characters)</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/>glDeleteTextures(1,&amp;m.textureID);</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/>m.vao-&gt;removeVOA();</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="class_text_1a3d0591d0b3a6bd73543cb8637fbe91e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_text_1a3d0591d0b3a6bd73543cb8637fbe91e5" kindref="member">Text::renderText</ref>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_y,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="233"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>are<sp/>in<sp/>texture<sp/>unit<sp/>0<sp/>as<sp/>this<sp/>is<sp/>what<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shader<sp/>expects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>glActiveTexture(GL_TEXTURE0);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_WRAP_S,<sp/>GL_CLAMP_TO_EDGE);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_WRAP_T,<sp/>GL_CLAMP_TO_EDGE);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MIN_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MAG_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>grab<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>shader<sp/>manager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>ngl::ShaderLib<sp/>*shader=ngl::ShaderLib::instance();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>built<sp/>in<sp/>text<sp/>rendering<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>(*shader)[</highlight><highlight class="stringliteral">&quot;nglTextShader&quot;</highlight><highlight class="normal">]-&gt;use();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>y<sp/>pos<sp/>will<sp/>always<sp/>be<sp/>the<sp/>same<sp/>so<sp/>set<sp/>it<sp/>once<sp/>for<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>we<sp/>are<sp/>rendering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>shader-&gt;setRegisteredUniform1f(</highlight><highlight class="stringliteral">&quot;ypos&quot;</highlight><highlight class="normal">,_y);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>enable<sp/>blending<sp/>and<sp/>disable<sp/>depth<sp/>sorting<sp/>so<sp/>the<sp/>font<sp/>renders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>glEnable(GL_BLEND);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>glDisable(GL_DEPTH_TEST);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>glBlendFunc(GL_SRC_ALPHA,<sp/>GL_ONE_MINUS_SRC_ALPHA);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>loop<sp/>for<sp/>each<sp/>of<sp/>the<sp/>char<sp/>and<sp/>draw<sp/>our<sp/>billboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>textLength=text.length();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>textLength;<sp/>++i)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>shader<sp/>x<sp/>position<sp/>this<sp/>will<sp/>change<sp/>each<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>render<sp/>a<sp/>glyph<sp/>by<sp/>the<sp/>width<sp/>of<sp/>the<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;setRegisteredUniform1f(</highlight><highlight class="stringliteral">&quot;xpos&quot;</highlight><highlight class="normal">,_x);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>find<sp/>the<sp/>FontChar<sp/>data<sp/>for<sp/>our<sp/>current<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>FontChar<sp/>f<sp/>=<sp/>m_characters[text[i].toAscii()];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>FontChar<sp/>f<sp/>=<sp/>m_characters[text[i]];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>std::map<sp/>&lt;char,FontChar&gt;::const_iterator<sp/>currentchar=<ref refid="class_text_1a3fa2d5b1a68627c8415c500bd95ec353" kindref="member">m_characters</ref>.find(text[i]);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentchar!=<ref refid="class_text_1a3fa2d5b1a68627c8415c500bd95ec353" kindref="member">m_characters</ref>.end())</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="struct_font_char" kindref="compound">FontChar</ref><sp/>f=currentchar-&gt;second;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>the<sp/>pre-generated<sp/>texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>f.<ref refid="struct_font_char_1ae1075095d8060c578b87d6437eccec2c" kindref="member">textureID</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>the<sp/>vao</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="struct_font_char_1a890a0845ed36a0d9aa80eff184f76230" kindref="member">vao</ref>-&gt;bind();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="struct_font_char_1a890a0845ed36a0d9aa80eff184f76230" kindref="member">vao</ref>-&gt;draw();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>unbind<sp/>the<sp/>vao</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="struct_font_char_1a890a0845ed36a0d9aa80eff184f76230" kindref="member">vao</ref>-&gt;unbind();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finally<sp/>move<sp/>to<sp/>the<sp/>next<sp/>glyph<sp/>x<sp/>position<sp/>by<sp/>incrementing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>width<sp/>of<sp/>the<sp/>char<sp/>just<sp/>drawn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>_x+=f.<ref refid="struct_font_char_1ad9a465bf2576f17d4123d440d1b4a6cb" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finally<sp/>disable<sp/>the<sp/>blend<sp/>and<sp/>re-enable<sp/>depth<sp/>sort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>glDisable(GL_BLEND);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>glEnable(GL_DEPTH_TEST);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="class_text_1adf20a23bc781824e83dc50c121f56aea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_text_1adf20a23bc781824e83dc50c121f56aea" kindref="member">Text::setScreenSize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_h<sp/>)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaleX=2.0/_w;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaleY=-2.0/_h;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>shader<sp/>we<sp/>do<sp/>the<sp/>following<sp/>code<sp/>to<sp/>transform<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x,y<sp/>to<sp/>NDC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gl_Position=vec4(<sp/>((xpos+inVert.x)*scaleX)-1,((ypos+inVert.y)*scaleY)+1.0,0.0,1.0);<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>all<sp/>we<sp/>need<sp/>to<sp/>do<sp/>is<sp/>calculate<sp/>the<sp/>scale<sp/>above<sp/>and<sp/>pass<sp/>to<sp/>shader<sp/>every<sp/>time<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>screen<sp/>dimensions<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>ngl::ShaderLib<sp/>*shader=ngl::ShaderLib::instance();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>(*shader)[</highlight><highlight class="stringliteral">&quot;nglTextShader&quot;</highlight><highlight class="normal">]-&gt;use();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;scaleX<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;scaleX<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;scaleY&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>shader-&gt;setRegisteredUniform1f(</highlight><highlight class="stringliteral">&quot;scaleX&quot;</highlight><highlight class="normal">,scaleX);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>shader-&gt;setRegisteredUniform1f(</highlight><highlight class="stringliteral">&quot;scaleY&quot;</highlight><highlight class="normal">,scaleY);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>our<sp/>text<sp/>shader<sp/>uses<sp/>the<sp/>alpha<sp/>of<sp/>the<sp/>texture<sp/>to<sp/>modulate<sp/>visibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>we<sp/>render<sp/>the<sp/>text<sp/>we<sp/>use<sp/>this<sp/>colour<sp/>passed<sp/>to<sp/>the<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>default<sp/>to<sp/>black<sp/>but<sp/>this<sp/>will<sp/>change<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>shader<sp/>uses<sp/>the<sp/>following<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vec4<sp/>text=texture(tex,vertUV.st);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fragColour.rgb=textColour.rgb;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fragColour.a=text.a;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="class_text_1ad898e1ff3c2221029c115ed5de7f1b72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_text_1ad898e1ff3c2221029c115ed5de7f1b72" kindref="member">Text::setColour</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Colour<sp/>&amp;_c<sp/>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>shader<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>ngl::ShaderLib<sp/>*shader=ngl::ShaderLib::instance();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>current<sp/>shader<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>(*shader)[</highlight><highlight class="stringliteral">&quot;nglTextShader&quot;</highlight><highlight class="normal">]-&gt;use();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>shader-&gt;setRegisteredUniform3f(</highlight><highlight class="stringliteral">&quot;textColour&quot;</highlight><highlight class="normal">,_c.m_r,_c.m_g,_c.m_b);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="class_text_1ae2ce0fc28fdfccc2842487d5be64e12a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_text_1ad898e1ff3c2221029c115ed5de7f1b72" kindref="member">Text::setColour</ref>(ngl::Real<sp/>_r,<sp/><sp/>ngl::Real<sp/>_g,<sp/>ngl::Real<sp/>_b)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>ngl::ShaderLib<sp/>*shader=ngl::ShaderLib::instance();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>(*shader)[</highlight><highlight class="stringliteral">&quot;nglTextShader&quot;</highlight><highlight class="normal">]-&gt;use();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>shader-&gt;setRegisteredUniform3f(</highlight><highlight class="stringliteral">&quot;textColour&quot;</highlight><highlight class="normal">,_r,_g,_b);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="class_text_1a6ec9d77b284824829150b8ebb436c358" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_text_1a6ec9d77b284824829150b8ebb436c358" kindref="member">Text::setTransform</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_y)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>ngl::ShaderLib<sp/>*shader=ngl::ShaderLib::instance();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>(*shader)[</highlight><highlight class="stringliteral">&quot;nglTextShader&quot;</highlight><highlight class="normal">]-&gt;use();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>shader-&gt;setRegisteredUniform2f(</highlight><highlight class="stringliteral">&quot;transform&quot;</highlight><highlight class="normal">,_x,_y);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/i7257092/may_01/night_master/LevelHeadsCVA3/src/Text.cpp"/>
  </compounddef>
</doxygen>
