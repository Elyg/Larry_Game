<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_physics_world_8cpp" kind="file">
    <compoundname>PhysicsWorld.cpp</compoundname>
    <includes refid="_physics_world_8h" local="yes">PhysicsWorld.h</includes>
    <includes refid="_collision_shape_8h" local="yes">CollisionShape.h</includes>
    <includes local="no">ngl/Obj.h</includes>
    <incdepgraph>
      <node id="2386">
        <label>ngl/Types.h</label>
      </node>
      <node id="2381">
        <label>BulletDebugDraw.h</label>
        <link refid="_bullet_debug_draw_8h"/>
        <childnode refid="2382" relation="include">
        </childnode>
        <childnode refid="2383" relation="include">
        </childnode>
        <childnode refid="2376" relation="include">
        </childnode>
      </node>
      <node id="2384">
        <label>CollisionShape.h</label>
        <link refid="_collision_shape_8h"/>
        <childnode refid="2375" relation="include">
        </childnode>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2379" relation="include">
        </childnode>
        <childnode refid="2386" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
      </node>
      <node id="2387">
        <label>string</label>
      </node>
      <node id="2378">
        <label>ngl/Obj.h</label>
      </node>
      <node id="2373">
        <label>PhysicsWorld.cpp</label>
        <link refid="PhysicsWorld.cpp"/>
        <childnode refid="2374" relation="include">
        </childnode>
        <childnode refid="2384" relation="include">
        </childnode>
        <childnode refid="2378" relation="include">
        </childnode>
      </node>
      <node id="2383">
        <label>vector</label>
      </node>
      <node id="2377">
        <label>ngl/Mat4.h</label>
      </node>
      <node id="2385">
        <label>unordered_map</label>
      </node>
      <node id="2375">
        <label>btBulletDynamicsCommon.h</label>
      </node>
      <node id="2382">
        <label>LinearMath/btIDebugDraw.h</label>
      </node>
      <node id="2380">
        <label>set</label>
      </node>
      <node id="2376">
        <label>ngl/Vec3.h</label>
      </node>
      <node id="2379">
        <label>memory</label>
      </node>
      <node id="2374">
        <label>PhysicsWorld.h</label>
        <link refid="_physics_world_8h"/>
        <childnode refid="2375" relation="include">
        </childnode>
        <childnode refid="2376" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
        <childnode refid="2378" relation="include">
        </childnode>
        <childnode refid="2379" relation="include">
        </childnode>
        <childnode refid="2380" relation="include">
        </childnode>
        <childnode refid="2381" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_physics_world_8cpp_1ad27cc17b25bb93134368d5eb21126eae" prot="public" static="no">
        <name>BIT</name>
        <param><defname>x</defname></param>
        <initializer>(1&lt;&lt;(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/i7257092/may_01/night_master/LevelHeadsCVA3/src/PhysicsWorld.cpp" line="6" column="9" bodyfile="/home/i7257092/may_01/night_master/LevelHeadsCVA3/src/PhysicsWorld.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77" prot="public" static="no">
        <name>collisiontypes</name>
        <enumvalue id="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a34a1e21e54220ed201aa50a10e39d4cd" prot="public">
          <name>COL_NOTHING</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77af087de47c8d9a5b010e7e89f4787cc0f" prot="public">
          <name>COL_BALL</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a35b75a8b1b7af85428f0e996a8ab18ae" prot="public">
          <name>COL_MESH</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" prot="public">
          <name>COL_ENVI</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/i7257092/may_01/night_master/LevelHeadsCVA3/src/PhysicsWorld.cpp" line="8" column="1" bodyfile="/home/i7257092/may_01/night_master/LevelHeadsCVA3/src/PhysicsWorld.cpp" bodystart="7" bodyend="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_physics_world_8h" kindref="compound">PhysicsWorld.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_collision_shape_8h" kindref="compound">CollisionShape.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ngl/Obj.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="_physics_world_8cpp_1ad27cc17b25bb93134368d5eb21126eae" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIT(x)<sp/>(1&lt;&lt;(x))</highlight></codeline>
<codeline lineno="7" refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77" refkind="member"><highlight class="preprocessor"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77" kindref="member">collisiontypes</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9" refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a34a1e21e54220ed201aa50a10e39d4cd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a34a1e21e54220ed201aa50a10e39d4cd" kindref="member">COL_NOTHING</ref><sp/>=<sp/>0,<sp/><sp/><sp/></highlight><highlight class="comment">//&lt;Collide<sp/>with<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77af087de47c8d9a5b010e7e89f4787cc0f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77af087de47c8d9a5b010e7e89f4787cc0f" kindref="member">COL_BALL</ref><sp/>=<sp/><ref refid="_physics_world_8cpp_1ad27cc17b25bb93134368d5eb21126eae" kindref="member">BIT</ref>(0),<sp/></highlight><highlight class="comment">//&lt;Collide<sp/>with<sp/>ball</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a35b75a8b1b7af85428f0e996a8ab18ae" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a35b75a8b1b7af85428f0e996a8ab18ae" kindref="member">COL_MESH</ref><sp/>=<sp/><ref refid="_physics_world_8cpp_1ad27cc17b25bb93134368d5eb21126eae" kindref="member">BIT</ref>(1),<sp/></highlight><highlight class="comment">//&lt;Collide<sp/>with<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref><sp/>=<sp/><ref refid="_physics_world_8cpp_1ad27cc17b25bb93134368d5eb21126eae" kindref="member">BIT</ref>(2)<sp/><sp/></highlight><highlight class="comment">//&lt;Collide<sp/>with<sp/>environment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_physics_world_1a1131de11bec4d9c67f0199ed90e8c26c" refkind="member"><highlight class="normal"><ref refid="class_physics_world_1a1131de11bec4d9c67f0199ed90e8c26c" kindref="member">PhysicsWorld::PhysicsWorld</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_debug)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a0e94c5e2ddfb045e096149274bcca439" kindref="member">m_collisionConfiguration</ref>.reset(<sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDefaultCollisionConfiguration());</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a16151e671d784d31a9b0fde1679804b7" kindref="member">m_dispatcher</ref>.reset(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btCollisionDispatcher(<ref refid="class_physics_world_1a0e94c5e2ddfb045e096149274bcca439" kindref="member">m_collisionConfiguration</ref>.get()));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a6668df1ffb922daa039b5f7ffe4bba8b" kindref="member">m_overlappingPairCache</ref>.reset(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDbvtBroadphase());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1af8d39a3b5ecea4037dd08446a8fcfd42" kindref="member">m_solver</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btSequentialImpulseConstraintSolver);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDiscreteDynamicsWorld(<ref refid="class_physics_world_1a16151e671d784d31a9b0fde1679804b7" kindref="member">m_dispatcher</ref>.get(),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_physics_world_1a6668df1ffb922daa039b5f7ffe4bba8b" kindref="member">m_overlappingPairCache</ref>.get(),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_physics_world_1af8d39a3b5ecea4037dd08446a8fcfd42" kindref="member">m_solver</ref>.get(),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_physics_world_1a0e94c5e2ddfb045e096149274bcca439" kindref="member">m_collisionConfiguration</ref>.get()));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_debug<sp/>==</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_physics_world_1aafe85a6dd0cbccf4c6fe2fe74e467caf" kindref="member">debugDrawer</ref>.reset(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_bullet_debug_draw" kindref="compound">BulletDebugDraw</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_physics_world_1aafe85a6dd0cbccf4c6fe2fe74e467caf" kindref="member">debugDrawer</ref>-&gt;setDebugMode(BulletDebugDraw::DBG_MAX_DEBUG_DRAW_MODE);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;setDebugDrawer(<ref refid="class_physics_world_1aafe85a6dd0cbccf4c6fe2fe74e467caf" kindref="member">debugDrawer</ref>.get());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47" refid="class_physics_world_1a416466367496b5525a6e676ef1e9d1a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a416466367496b5525a6e676ef1e9d1a3" kindref="member">PhysicsWorld::addSphere</ref>(std::string<sp/>_shapeName,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_pos,ngl::Real<sp/>_mass,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_inertia,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_draw)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>dynamic<sp/>rigidbody</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>colShape<sp/>=<sp/><ref refid="class_collision_shape_1a419073488476916f9dba2dd97ae2bf76" kindref="member">CollisionShape::instance</ref>()-&gt;<ref refid="class_collision_shape_1ac2fc5b4b07d9b6f6551d1e021e65626e" kindref="member">getShape</ref>(_shapeName);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>btTransform<sp/>startTransform;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>startTransform.setIdentity();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>btScalar<sp/><sp/>mass(_mass);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>btVector3<sp/>localInertia(_inertia.m_x,_inertia.m_y,_inertia.m_z);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>colShape-&gt;calculateLocalInertia(mass,localInertia);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>startTransform.setOrigin(btVector3(_pos.m_x,_pos.m_y,_pos.m_z));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//using<sp/>motionstate<sp/>is<sp/>recommended,<sp/>it<sp/>provides<sp/>interpolation<sp/>capabilities,<sp/>and<sp/>only<sp/>synchronizes<sp/>&apos;active&apos;<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>btDefaultMotionState*<sp/>myMotionState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDefaultMotionState(startTransform);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>btRigidBody::btRigidBodyConstructionInfo<sp/>rbInfo(mass,myMotionState,colShape,localInertia);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>rbInfo.m_additionalAngularDampingFactor=0.0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>rbInfo.m_additionalDamping=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/>btRigidBody*<sp/>body<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btRigidBody(rbInfo);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_draw<sp/>!=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;setCollisionFlags(body-&gt;getCollisionFlags()<sp/>|<sp/>32);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>body-&gt;setFriction(1.0);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>body-&gt;setRestitution(0.4f);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>body-&gt;setRollingFriction(0.4f);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>body-&gt;forceActivationState(4);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//body-&gt;setIgnoreCollisionCheck();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;addRigidBody(body,<ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77af087de47c8d9a5b010e7e89f4787cc0f" kindref="member">COL_BALL</ref>,<ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="struct_physics_world_1_1_body" kindref="compound">Body</ref><sp/>b;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a76d993462af7a4aef4bb58d53e780679" kindref="member">name</ref>=_shapeName;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a7a98d8e1416c0ec47fa6a5831ea317c9" kindref="member">body</ref>=body;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.push_back(b);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="class_physics_world_1ab1459e80fc7dda7447371dbd79ecb116" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1ab1459e80fc7dda7447371dbd79ecb116" kindref="member">PhysicsWorld::addLegSphere</ref>(std::string<sp/>_shapeName,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_pos,ngl::Real<sp/>_mass,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_inertia)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>dynamic<sp/>rigidbody</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>colShape<sp/>=<sp/><ref refid="class_collision_shape_1a419073488476916f9dba2dd97ae2bf76" kindref="member">CollisionShape::instance</ref>()-&gt;<ref refid="class_collision_shape_1ac2fc5b4b07d9b6f6551d1e021e65626e" kindref="member">getShape</ref>(_shapeName);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>btTransform<sp/>startTransform;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>startTransform.setIdentity();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>btScalar<sp/><sp/>mass(_mass);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>btVector3<sp/>localInertia(_inertia.m_x,_inertia.m_y,_inertia.m_z);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>colShape-&gt;calculateLocalInertia(mass,localInertia);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>startTransform.setOrigin(btVector3(_pos.m_x,_pos.m_y,_pos.m_z));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//using<sp/>motionstate<sp/>is<sp/>recommended,<sp/>it<sp/>provides<sp/>interpolation<sp/>capabilities,<sp/>and<sp/>only<sp/>synchronizes<sp/>&apos;active&apos;<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>btDefaultMotionState*<sp/>myMotionState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDefaultMotionState(startTransform);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>btRigidBody::btRigidBodyConstructionInfo<sp/>rbInfo(mass,myMotionState,colShape,localInertia);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>rbInfo.m_additionalAngularDampingFactor=0.0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>rbInfo.m_additionalDamping=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>btRigidBody*<sp/>body<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btRigidBody(rbInfo);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//body-&gt;setLinearFactor(btVector3(0,1,0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>body-&gt;setAngularFactor(btVector3(0,0,0));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>body-&gt;setFriction(0.2);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>body-&gt;setRestitution(0.0f);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>body-&gt;setRollingFriction(1.0f);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>body-&gt;forceActivationState(4);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//body-&gt;setIgnoreCollisionCheck();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;addRigidBody(body,<ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77af087de47c8d9a5b010e7e89f4787cc0f" kindref="member">COL_BALL</ref>,<ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="struct_physics_world_1_1_body" kindref="compound">Body</ref><sp/>b;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a76d993462af7a4aef4bb58d53e780679" kindref="member">name</ref>=_shapeName;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a7a98d8e1416c0ec47fa6a5831ea317c9" kindref="member">body</ref>=body;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.push_back(b);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_physics_world_1add30f5869f0a212c4f12e67d40d41ceb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1add30f5869f0a212c4f12e67d40d41ceb" kindref="member">PhysicsWorld::addLevelMesh</ref>(std::string<sp/>_shapeName,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_pos)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>dynamic<sp/>rigidbody</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>colShape<sp/>=<sp/><ref refid="class_collision_shape_1a419073488476916f9dba2dd97ae2bf76" kindref="member">CollisionShape::instance</ref>()-&gt;<ref refid="class_collision_shape_1ac2fc5b4b07d9b6f6551d1e021e65626e" kindref="member">getShape</ref>(_shapeName);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>btTransform<sp/>startTransform;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>startTransform.setIdentity();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>btScalar<sp/><sp/>mass(0.0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>btVector3<sp/>localInertia(0,0,0);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>startTransform.setOrigin(btVector3(_pos.m_x,_pos.m_y,_pos.m_z));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//using<sp/>motionstate<sp/>is<sp/>recommended,<sp/>it<sp/>provides<sp/>interpolation<sp/>capabilities,<sp/>and<sp/>only<sp/>synchronizes<sp/>&apos;active&apos;<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>btDefaultMotionState*<sp/>myMotionState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDefaultMotionState(startTransform);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>btRigidBody::btRigidBodyConstructionInfo<sp/>rbInfo(mass,myMotionState,colShape,localInertia);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>btRigidBody*<sp/>body<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btRigidBody(rbInfo);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//rbInfo.m_additionalAngularDampingFactor=4.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//rbInfo.m_additionalDamping=true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>body-&gt;setFriction(1.0);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>body-&gt;setRestitution(1.0f);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>body-&gt;setRollingFriction(1.0f);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;addRigidBody(body,<ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref>,<sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a35b75a8b1b7af85428f0e996a8ab18ae" kindref="member">COL_MESH</ref><sp/>|<sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77af087de47c8d9a5b010e7e89f4787cc0f" kindref="member">COL_BALL</ref><sp/>|<sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="struct_physics_world_1_1_body" kindref="compound">Body</ref><sp/>b;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a76d993462af7a4aef4bb58d53e780679" kindref="member">name</ref>=_shapeName;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a7a98d8e1416c0ec47fa6a5831ea317c9" kindref="member">body</ref>=body;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.push_back(b);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154" refid="class_physics_world_1a45f8d6d437d7a42ab3dca7295aef4fa1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a45f8d6d437d7a42ab3dca7295aef4fa1" kindref="member">PhysicsWorld::addMesh</ref>(std::string<sp/>_shapeName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_pos,ngl::Real<sp/>_mass,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_inertia)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>dynamic<sp/>rigidbody</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>colShape<sp/>=<sp/><ref refid="class_collision_shape_1a419073488476916f9dba2dd97ae2bf76" kindref="member">CollisionShape::instance</ref>()-&gt;<ref refid="class_collision_shape_1ac2fc5b4b07d9b6f6551d1e021e65626e" kindref="member">getShape</ref>(_shapeName);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>btTransform<sp/>startTransform;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>startTransform.setIdentity();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>btScalar<sp/><sp/>mass(_mass);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>btVector3<sp/>localInertia(_inertia.m_x,_inertia.m_y,_inertia.m_z);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>colShape-&gt;calculateLocalInertia(mass,localInertia);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>startTransform.setOrigin(btVector3(_pos.m_x,_pos.m_y,_pos.m_z));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//using<sp/>motionstate<sp/>is<sp/>recommended,<sp/>it<sp/>provides<sp/>interpolation<sp/>capabilities,<sp/>and<sp/>only<sp/>synchronizes<sp/>&apos;active&apos;<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>btDefaultMotionState*<sp/>myMotionState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDefaultMotionState(startTransform);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>btRigidBody::btRigidBodyConstructionInfo<sp/>rbInfo(mass,myMotionState,colShape,localInertia);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>btRigidBody*<sp/>body<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btRigidBody(rbInfo);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>rbInfo.m_additionalAngularDampingFactor=4.0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>rbInfo.m_additionalDamping=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>body-&gt;setFriction(1.0);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>body-&gt;setRestitution(0.1f);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>body-&gt;setRollingFriction(0.06f);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>body-&gt;forceActivationState(4);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;addRigidBody(body,<ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a35b75a8b1b7af85428f0e996a8ab18ae" kindref="member">COL_MESH</ref>,<ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="struct_physics_world_1_1_body" kindref="compound">Body</ref><sp/>b;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a76d993462af7a4aef4bb58d53e780679" kindref="member">name</ref>=_shapeName;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a7a98d8e1416c0ec47fa6a5831ea317c9" kindref="member">body</ref>=body;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.push_back(b);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="class_physics_world_1a41946ba3915c46b678d300f3d606cf10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a41946ba3915c46b678d300f3d606cf10" kindref="member">PhysicsWorld::addBox</ref>(std::string<sp/>_shapeName,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_pos)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>colShape<sp/>=<sp/><ref refid="class_collision_shape_1a419073488476916f9dba2dd97ae2bf76" kindref="member">CollisionShape::instance</ref>()-&gt;<ref refid="class_collision_shape_1ac2fc5b4b07d9b6f6551d1e021e65626e" kindref="member">getShape</ref>(_shapeName);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>btTransform<sp/>startTransform;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>startTransform.setIdentity();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>btScalar<sp/><sp/>mass(2.f);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>btVector3<sp/>localInertia(20,120,120);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>colShape-&gt;calculateLocalInertia(mass,localInertia);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>startTransform.setOrigin(btVector3(_pos.m_x,_pos.m_y,_pos.m_z));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//using<sp/>motionstate<sp/>is<sp/>recommended,<sp/>it<sp/>provides<sp/>interpolation<sp/>capabilities,<sp/>and<sp/>only<sp/>synchronizes<sp/>&apos;active&apos;<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>btDefaultMotionState*<sp/>myMotionState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDefaultMotionState(startTransform);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>btRigidBody::btRigidBodyConstructionInfo<sp/>rbInfo(mass,myMotionState,colShape,localInertia);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>rbInfo.m_restitution<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>rbInfo.m_friction<sp/>=<sp/>100.5f;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>rbInfo.m_additionalAngularDampingFactor=4.0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>rbInfo.m_additionalDamping=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>btRigidBody*<sp/>body<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btRigidBody(rbInfo);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//body-&gt;setWorldTransform();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//body-&gt;forceActivationState(4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;addRigidBody(body,<ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref>,<sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a35b75a8b1b7af85428f0e996a8ab18ae" kindref="member">COL_MESH</ref><sp/>|<sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77af087de47c8d9a5b010e7e89f4787cc0f" kindref="member">COL_BALL</ref><sp/>|<sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="struct_physics_world_1_1_body" kindref="compound">Body</ref><sp/>b;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a76d993462af7a4aef4bb58d53e780679" kindref="member">name</ref>=_shapeName;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a7a98d8e1416c0ec47fa6a5831ea317c9" kindref="member">body</ref>=body;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.push_back(b);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="class_physics_world_1abf1573b008b52b60a83a8f36cbdd51bc" refkind="member"><highlight class="normal"><ref refid="class_physics_world_1abf1573b008b52b60a83a8f36cbdd51bc" kindref="member">PhysicsWorld::~PhysicsWorld</ref>()</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="class_physics_world_1a59cd5dbd3e7791bd23db032bcc64c202" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a59cd5dbd3e7791bd23db032bcc64c202" kindref="member">PhysicsWorld::addPlatform</ref>(std::string<sp/>_shapeName,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_pos,ngl::Real<sp/>_mass,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_inertia)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>dynamic<sp/>rigidbody</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>btCollisionShape*<sp/>colShape<sp/>=<sp/><ref refid="class_collision_shape_1a419073488476916f9dba2dd97ae2bf76" kindref="member">CollisionShape::instance</ref>()-&gt;<ref refid="class_collision_shape_1ac2fc5b4b07d9b6f6551d1e021e65626e" kindref="member">getShape</ref>(_shapeName);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>btTransform<sp/>startTransform;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>startTransform.setIdentity();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>btScalar<sp/><sp/>mass(_mass);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>btVector3<sp/>localInertia(_inertia.m_x,_inertia.m_y,_inertia.m_z);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>colShape-&gt;calculateLocalInertia(mass,localInertia);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>startTransform.setOrigin(btVector3(_pos.m_x,_pos.m_y,_pos.m_z));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//using<sp/>motionstate<sp/>is<sp/>recommended,<sp/>it<sp/>provides<sp/>interpolation<sp/>capabilities,<sp/>and<sp/>only<sp/>synchronizes<sp/>&apos;active&apos;<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>btDefaultMotionState*<sp/>myMotionState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDefaultMotionState(startTransform);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>btRigidBody::btRigidBodyConstructionInfo<sp/>rbInfo(mass,myMotionState,colShape,localInertia);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>btRigidBody*<sp/>body<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btRigidBody(rbInfo);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>set<sp/>linear<sp/>and<sp/>angular<sp/>factor<sp/>of<sp/>body<sp/>to<sp/>only<sp/>allow<sp/>movement<sp/>on<sp/>th<sp/>xy<sp/>plane,<sp/>so<sp/>that<sp/>gravity<sp/>doesn&apos;t<sp/>effect<sp/>the<sp/>body&apos;s<sp/>motion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>linearFactor<sp/>to<sp/>1,0,0<sp/>only<sp/>allows<sp/>movement<sp/>along<sp/>x-axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>body-&gt;setLinearFactor(btVector3(1,0,0));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>body-&gt;setAngularFactor(btVector3(0,0,0));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>body-&gt;setFriction(1.0);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>body-&gt;setRollingFriction(0.06f);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>body-&gt;setRestitution(0.5f);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>body-&gt;forceActivationState(4);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>collision<sp/>of<sp/>the<sp/>rigid<sp/>body<sp/>to<sp/>react<sp/>with<sp/>the<sp/>ball<sp/>and<sp/>the<sp/>environment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;addRigidBody(body,<ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref>,<sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a35b75a8b1b7af85428f0e996a8ab18ae" kindref="member">COL_MESH</ref><sp/>|<sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77af087de47c8d9a5b010e7e89f4787cc0f" kindref="member">COL_BALL</ref><sp/>|<sp/><ref refid="_physics_world_8cpp_1ab16fc896e7569b09b11d0b587b50aa77a21be7ed7a7decb355e8293284300e43b" kindref="member">COL_ENVI</ref>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="struct_physics_world_1_1_body" kindref="compound">Body</ref><sp/>b;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a76d993462af7a4aef4bb58d53e780679" kindref="member">name</ref>=_shapeName;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>b.<ref refid="struct_physics_world_1_1_body_1a7a98d8e1416c0ec47fa6a5831ea317c9" kindref="member">body</ref>=body;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.push_back(b);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="class_physics_world_1a0a5ebdf9925b48d0a8725545010267f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a0a5ebdf9925b48d0a8725545010267f2" kindref="member">PhysicsWorld::step</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_timeStep,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_maxSubSteps,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_fixedTimeStep)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//timeStep<sp/>&lt;<sp/>maxSubSteps<sp/>*<sp/>fixedTimeStep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;stepSimulation(_timeStep,<sp/>_maxSubSteps,<sp/>_fixedTimeStep);</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="class_physics_world_1acef2efa13c576073a2a907709114422d" refkind="member"><highlight class="normal">ngl::Mat4<sp/><ref refid="class_physics_world_1acef2efa13c576073a2a907709114422d" kindref="member">PhysicsWorld::getTransformMatrix</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_index)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>matrix[16];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>btTransform<sp/>trans;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>trans<sp/>=<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>[_index].body-&gt;getCenterOfMassTransform();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>trans.getOpenGLMatrix(matrix);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ngl::Mat4(<sp/>matrix[0],matrix[1],matrix[2],matrix[3],</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix[4],matrix[5],matrix[6],matrix[7],</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix[8],matrix[9],matrix[10],matrix[11],</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix[12],matrix[13],matrix[14],matrix[15]</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="class_physics_world_1a428dd5813f8bd296083e9a4ca1984211" refkind="member"><highlight class="normal">ngl::Mat4<sp/><ref refid="class_physics_world_1acef2efa13c576073a2a907709114422d" kindref="member">PhysicsWorld::getTransformMatrix</ref>(std::string<sp/>_shape)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>matrix[16];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btTransform<sp/>trans;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trans<sp/>=<sp/>m_bodies[k].body-&gt;getCenterOfMassTransform();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trans.getOpenGLMatrix(matrix);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(found<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Did<sp/>not<sp/>find<sp/>transformation<sp/>matrix<sp/>for<sp/>shape:<sp/>&quot;</highlight><highlight class="normal">+<sp/>_shape&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;No<sp/>such<sp/>object&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ngl::Mat4();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ngl::Mat4(<sp/>matrix[0],matrix[1],matrix[2],matrix[3],</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[4],matrix[5],matrix[6],matrix[7],</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[8],matrix[9],matrix[10],matrix[11],</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[12],matrix[13],matrix[14],matrix[15]</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="class_physics_world_1a59241bfca0313e9d049f55f546e6b184" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a59241bfca0313e9d049f55f546e6b184" kindref="member">PhysicsWorld::setTransformMatrix</ref>(std::string<sp/>_shape,<sp/>ngl::Mat4<sp/>_mat)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>btTransform<sp/>trans;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>trans.setFromOpenGLMatrix(_mat.openGL());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(found<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;No<sp/>such<sp/>object&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_bodies[k].body-&gt;setCenterOfMassTransform(trans);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="class_physics_world_1a692161a381b2015cba102b08c02f6c3f" refkind="member"><highlight class="normal">ngl::Vec3<sp/><ref refid="class_physics_world_1a692161a381b2015cba102b08c02f6c3f" kindref="member">PhysicsWorld::getPosition</ref>(std::string<sp/>_shape){</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>ngl::Vec3<sp/>newPos<sp/>(0,0,0);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btVector3<sp/>tempPos<sp/>=<sp/>m_bodies[k].body-&gt;getCenterOfMassPosition();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPos[0]<sp/>=<sp/>tempPos.getX();</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPos[1]<sp/>=<sp/>tempPos.getY();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPos[2]<sp/>=<sp/>tempPos.getZ();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(found<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Did<sp/>not<sp/>find<sp/>position<sp/>for<sp/>shape:<sp/>&quot;</highlight><highlight class="normal">+<sp/>_shape&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;No<sp/>such<sp/>object&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newPos;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newPos;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379" refid="class_physics_world_1ab00e4b94b999ddf53a637e4a999959ee" refkind="member"><highlight class="normal">ngl::Vec3<sp/><ref refid="class_physics_world_1ab00e4b94b999ddf53a637e4a999959ee" kindref="member">PhysicsWorld::getLinVelocity</ref>(std::string<sp/>_shape)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>ngl::Vec3<sp/>newVelocity<sp/>(0.0,0.0,0.0);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btVector3<sp/>tempVel<sp/>=<sp/>m_bodies[k].body-&gt;getLinearVelocity();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity[0]<sp/>=<sp/>tempVel.getX();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity[1]<sp/>=<sp/>tempVel.getY();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity[2]<sp/>=<sp/>tempVel.getZ();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(found<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Did<sp/>not<sp/>find<sp/>velocity<sp/>for<sp/>shape:<sp/>&quot;</highlight><highlight class="normal">+<sp/>_shape&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;No<sp/>such<sp/>object&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newVelocity;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newVelocity;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="class_physics_world_1a9898273f563625b150091d5657de02f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a9898273f563625b150091d5657de02f3" kindref="member">PhysicsWorld::setAngVelocity</ref>(std::string<sp/>_shape,<sp/>ngl::Vec3<sp/>&amp;_velocity)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>btVector3<sp/>newVelocity;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity.setX(_velocity.m_x);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity.setY(_velocity.m_y);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity.setZ(_velocity.m_z);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bodies[k].body-&gt;setAngularVelocity(newVelocity);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(found<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Was<sp/>not<sp/>able<sp/>to<sp/>set<sp/>angular<sp/>velocity<sp/>for<sp/>shape:<sp/>&quot;</highlight><highlight class="normal">+<sp/>_shape&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;No<sp/>such<sp/>object&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="class_physics_world_1a63bc2c028b9a49498411038100181ed1" refkind="member"><highlight class="normal">ngl::Vec3<sp/><ref refid="class_physics_world_1a63bc2c028b9a49498411038100181ed1" kindref="member">PhysicsWorld::getAngVelocity</ref>(std::string<sp/>_shape)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>ngl::Vec3<sp/>newVelocity;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btVector3<sp/>tempVel<sp/>=<sp/>m_bodies[k].body-&gt;getAngularVelocity();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity[0]<sp/>=<sp/>tempVel.getX();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity[1]<sp/>=<sp/>tempVel.getY();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity[2]<sp/>=<sp/>tempVel.getZ();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(found<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Did<sp/>not<sp/>find<sp/>angular<sp/>velocity<sp/>for<sp/>shape:<sp/>&quot;</highlight><highlight class="normal">+<sp/>_shape&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;No<sp/>such<sp/>object&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newVelocity;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newVelocity;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="class_physics_world_1a73a5f631224e1486c7d6343f0a148ac0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a73a5f631224e1486c7d6343f0a148ac0" kindref="member">PhysicsWorld::setLinVelocity</ref>(std::string<sp/>_shape,<sp/>ngl::Vec3<sp/>&amp;_velocity)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>btVector3<sp/>newVelocity;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity.setX(_velocity.m_x);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity.setY(_velocity.m_y);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVelocity.setZ(_velocity.m_z);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bodies[k].body-&gt;setLinearVelocity(newVelocity);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(found<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Was<sp/>no<sp/>able<sp/>to<sp/>set<sp/>linear<sp/>vel<sp/>for<sp/>shape:<sp/>&quot;</highlight><highlight class="normal">+<sp/>_shape&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;No<sp/>such<sp/>object&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="class_physics_world_1a2abd0187fc57fdef29022bc2f69980ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a2abd0187fc57fdef29022bc2f69980ea" kindref="member">PhysicsWorld::reset</ref>()</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>at<sp/>1<sp/>to<sp/>leave<sp/>the<sp/>ground<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;<ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;removeRigidBody(<ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>[i].body);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.erase(<ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.begin()+1,<ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>.end());</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502" refid="class_physics_world_1ae993e38768816889858cc953e36271ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1ae993e38768816889858cc953e36271ed" kindref="member">PhysicsWorld::printBodies</ref>()</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=0;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>){</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;k&lt;&lt;</highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>i.name&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510" refid="class_physics_world_1a4cb52e883aaf26f356dc6906757af84d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a4cb52e883aaf26f356dc6906757af84d" kindref="member">PhysicsWorld::addImpulse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_i,<sp/>std::string<sp/>_shape)</highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bodies[k].body-&gt;applyCentralImpulse(btVector3(_i.m_x,_i.m_y,_i.m_z));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="class_physics_world_1ac14ab775fcccc66e75fb4f70da54ac72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1ac14ab775fcccc66e75fb4f70da54ac72" kindref="member">PhysicsWorld::applyForceCentral</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_p,<sp/>std::string<sp/>_shape)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bodies[k].body-&gt;applyCentralForce(btVector3(_p.m_x,_p.m_y,_p.m_z));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541" refid="class_physics_world_1a6d5cca57854b708690441dd0a75cb2fd" refkind="member"><highlight class="normal">ngl::Vec3<sp/><ref refid="class_physics_world_1a6d5cca57854b708690441dd0a75cb2fd" kindref="member">PhysicsWorld::getCentreOfMass</ref>(std::string<sp/>_shape)</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>btVector3<sp/>tempCenterPos;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempCenterPos=<sp/>m_bodies[k].body-&gt;getCenterOfMassPosition();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>ngl::Vec3<sp/>centerPos;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>centerPos.set(tempCenterPos.getX(),tempCenterPos.getY(),tempCenterPos.getZ());</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>centerPos;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="class_physics_world_1a7195c3626fb4be06217660c8a8038ffe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a7195c3626fb4be06217660c8a8038ffe" kindref="member">PhysicsWorld::removeCollisionObj</ref>(std::string<sp/>_shape)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>){</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape){</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;removeRigidBody(m_bodies[k].body);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>m_bodies.erase(m_bodies.begin()+k);</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574" refid="class_physics_world_1a9912925d440ee83d22fc00f692574ca1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a9912925d440ee83d22fc00f692574ca1" kindref="member">PhysicsWorld::debugWorldDraw</ref>()</highlight></codeline>
<codeline lineno="575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;debugDrawWorld();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1aafe85a6dd0cbccf4c6fe2fe74e467caf" kindref="member">debugDrawer</ref>-&gt;drawUpdate();</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="class_physics_world_1aa5c4661e5ac86c996bd4e8f66f39e980" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1aa5c4661e5ac86c996bd4e8f66f39e980" kindref="member">PhysicsWorld::rayTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_b)</highlight></codeline>
<codeline lineno="581"><highlight class="normal">{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>raytest<sp/>bullet<sp/>wiki</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>btVector3<sp/>a<sp/>=<sp/>btVector3(_a.m_x,_a.m_y,_a.m_z);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>btVector3<sp/>b<sp/>=<sp/>btVector3(_b.m_x,_b.m_y,_b.m_z);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>btCollisionWorld::ClosestRayResultCallback<sp/>RayCallback(a,<sp/>b);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>raycast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;rayTest(a,<sp/>b,<sp/>RayCallback);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RayCallback.hasHit())</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602" refid="class_physics_world_1a2eb74a13ee526a3fcf449f28fa95c516" refkind="member"><highlight class="normal">ngl::Vec3<sp/><ref refid="class_physics_world_1a2eb74a13ee526a3fcf449f28fa95c516" kindref="member">PhysicsWorld::getVelocityOfPlatform</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_b)</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>raytest<sp/>bullet<sp/>wiki</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>btVector3<sp/>a<sp/>=<sp/>btVector3(_a.m_x,_a.m_y,_a.m_z);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>btVector3<sp/>b<sp/>=<sp/>btVector3(_b.m_x,_b.m_y,_b.m_z);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>btCollisionWorld::ClosestRayResultCallback<sp/>RayCallback(a,<sp/>b);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>raycast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;rayTest(a,<sp/>b,<sp/>RayCallback);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RayCallback.hasHit())</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//find<sp/>body<sp/>matching<sp/>RayCallback&apos;s<sp/>collisionObject<sp/>then<sp/>get<sp/>it&apos;s<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.body<sp/>==<sp/>btRigidBody::upcast(RayCallback.m_collisionObject))</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1ab00e4b94b999ddf53a637e4a999959ee" kindref="member">getLinVelocity</ref>(m_bodies[k].name);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ngl::Vec3(0,0,0);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635" refid="class_physics_world_1a9b736fecd9f428bf52abf04c150a4bcc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1aa5c4661e5ac86c996bd4e8f66f39e980" kindref="member">PhysicsWorld::rayTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_b,<sp/>ngl::Vec3<sp/>&amp;_out)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>raytest<sp/>bullet<sp/>wiki</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>btVector3<sp/>a<sp/>=<sp/>btVector3(_a.m_x,_a.m_y,_a.m_z);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>btVector3<sp/>b<sp/>=<sp/>btVector3(_b.m_x,_b.m_y,_b.m_z);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>btCollisionWorld::ClosestRayResultCallback<sp/>RayCallback(a,<sp/>b);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>raycast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;rayTest(a,<sp/>b,<sp/>RayCallback);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RayCallback.hasHit())</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_out<sp/>=<sp/>ngl::Vec3(RayCallback.m_hitPointWorld.getX(),RayCallback.m_hitPointWorld.getY(),RayCallback.m_hitPointWorld.getZ());</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="class_physics_world_1af0f1309e7a7e9c47763248e5772b5230" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1af0f1309e7a7e9c47763248e5772b5230" kindref="member">PhysicsWorld::setGravityForBody</ref>(std::string<sp/>_shape,<sp/>ngl::Vec3<sp/>_vec)</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bodies[k].body-&gt;setGravity(btVector3(_vec.m_x,_vec.m_y,_vec.m_z));</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="class_physics_world_1a6f01ee5e9135ac370a8a19767de1a838" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a6f01ee5e9135ac370a8a19767de1a838" kindref="member">PhysicsWorld::freezeBody</ref>(std::string<sp/>_shape)</highlight></codeline>
<codeline lineno="674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref><sp/>)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.name<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bodies[k].body-&gt;<sp/>setMassProps(0,<sp/>btVector3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bodies[k].body-&gt;<sp/>setLinearVelocity(btVector3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bodies[k].body-&gt;<sp/>setAngularVelocity(btVector3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="class_physics_world_1a98831beb054a4668161a113aa770c3dc" refkind="member"><highlight class="normal">btRigidBody<sp/>*<ref refid="class_physics_world_1a98831beb054a4668161a113aa770c3dc" kindref="member">PhysicsWorld::FindGameObject</ref>(btRigidBody*<sp/>_shape)</highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>checks<sp/>whether<sp/>specific<sp/>shape<sp/>is<sp/>in<sp/>m_bodies.<sp/>If<sp/>true<sp/>it<sp/>is<sp/>added<sp/>to<sp/>m_collisionBodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="class_physics_world_1a31f6f65ace404661cc9954580fe3c64d" kindref="member">m_bodies</ref>)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.body<sp/>==<sp/>_shape)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_physics_world_1a0ba57170f80894014e04f33ff4a425ed" kindref="member">m_collisionBodies</ref>.push_back(i);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_physics_world_1a0ba57170f80894014e04f33ff4a425ed" kindref="member">m_collisionBodies</ref>[k].body;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_shape;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="class_physics_world_1a68c31016abc95c051890c9a211ac4565" refkind="member"><highlight class="normal">ngl::Vec3<sp/><ref refid="class_physics_world_1a68c31016abc95c051890c9a211ac4565" kindref="member">PhysicsWorld::rayNormalTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ngl::Vec3<sp/>&amp;_b)</highlight></codeline>
<codeline lineno="711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>raytest<sp/>bullet<sp/>wiki</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>btVector3<sp/>a<sp/>=<sp/>btVector3(_a.m_x,_a.m_y,_a.m_z);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>btVector3<sp/>b<sp/>=<sp/>btVector3(_b.m_x,_b.m_y,_b.m_z);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>btCollisionWorld::ClosestRayResultCallback<sp/>RayCallback(a,<sp/>b);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>raycast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><ref refid="class_physics_world_1a09619087b797b3325fee215a657ede9f" kindref="member">m_dynamicsWorld</ref>-&gt;rayTest(a,<sp/>b,<sp/>RayCallback);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RayCallback.hasHit())</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ngl::Vec3(RayCallback.m_hitNormalWorld.getX(),RayCallback.m_hitNormalWorld.getY(),RayCallback.m_hitNormalWorld.getZ());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/i7257092/may_01/night_master/LevelHeadsCVA3/src/PhysicsWorld.cpp"/>
  </compounddef>
</doxygen>
