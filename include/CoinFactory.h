#ifndef COINFACTORY
#define COINFACTORY

#include "Coin.h"
#include "PhysicsWorld.h"
#include "Trigger.h"

class Coin;
class PhysicsWorld;
//-------------------------------------------------------------------------------------------------------------------------
/// @file CoinFactory.h
/// @author Morgan Henty, Eligijus Titas
/// @version 1.0
/// @class CoinFactory
/// @brief This manages coin creation and collisions of the coins
//--------------------------------------------------------------------------------------------------------------------------
class CoinFactory
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor of the coin factory
  //----------------------------------------------------------------------------------------------------------------------
  CoinFactory();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor for the coin factory
  //----------------------------------------------------------------------------------------------------------------------
  ~CoinFactory();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief creates a new coin by calling the coin class
  /// @param _pos position of coin
  /// @param _id identifier for coin
  /// @param _physics pointer to physicsworld class
  //----------------------------------------------------------------------------------------------------------------------
  void createCoin(ngl::Vec3 _pos, std::string _id, PhysicsWorld *_physics);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief deletes a specified coin along with this pointer
  /// @param _coin pointer to the coin class
  //----------------------------------------------------------------------------------------------------------------------
  void deleteCoin(Coin* _coin);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns pointer to our coin
  //----------------------------------------------------------------------------------------------------------------------
  Coin *getCoin() {return m_coin;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief reads in a text file that specifies the x,y,z position of each coin
  //----------------------------------------------------------------------------------------------------------------------
  void readCoinPosData();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns a std::vector that holds all the positions of the coins
  //----------------------------------------------------------------------------------------------------------------------
  inline const std::vector<ngl::Vec3>& getCoinPosList(){ return m_coinPosList; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get the positions of a specific coin from the list
  /// @param _index index value
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 getCoinPos(int _index) {return m_coinPosList[_index];}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the number of coins within the std::vector
  //----------------------------------------------------------------------------------------------------------------------
  int getNumCoins() { return m_coinPosList.size();}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns a std::vector that holds pointers to all the coins
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<Coin*> getCoins() {return m_coinList;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set the global coin score to zero
  //----------------------------------------------------------------------------------------------------------------------
  void setCoinScore() { m_coinCounter = 0;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief increment the global coin counter by a specific amount
  /// @param _score the value to add to the global score
  //----------------------------------------------------------------------------------------------------------------------
  void addCoinScore(int _score) { m_coinCounter +=_score;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief return the global coin score
  //----------------------------------------------------------------------------------------------------------------------
  int getCoinScore() {return m_coinCounter;}

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief global coin counter
  //----------------------------------------------------------------------------------------------------------------------
  int m_coinCounter;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vector list that hold pointers to all the coins created
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<Coin *> m_coinList;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief pointer to coin
  //----------------------------------------------------------------------------------------------------------------------
  Coin *m_coin;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief pointer to our physicsWorld
  //----------------------------------------------------------------------------------------------------------------------
  PhysicsWorld *m_physics;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief pointer to the coin's trigger
  //----------------------------------------------------------------------------------------------------------------------
  Trigger *m_coinTrigger;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief raw data of text file that holds coin positions
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<float> m_coinPosListUnordered;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sorted data that holds the x,y,z position of the coins
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<ngl::Vec3> m_coinPosList;
};

#endif // COINFACTORY
