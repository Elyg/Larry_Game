#ifndef ANIMATION
#define ANIMATION

#include <NGLDraw.h>
#include <ngl/NCCAPointBake.h>

enum class animCycle {WALK = 0,JUMP = 1, REST = 2, REST2 =3, COIN_REST = 4};
enum class animType {CHAR_TYPE = 0,COIN_TYPE = 1};
//-------------------------------------------------------------------------------------------------------------------------
/// @file Animation.h
/// @author Morgan Henty
/// @version 1.0
/// @class Animation
/// @brief This class manages the animation cycles of the character and the coin
//--------------------------------------------------------------------------------------------------------------------------

class Animation
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor of the animation class
    //----------------------------------------------------------------------------------------------------------------------
    Animation();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor of the animation class
    //----------------------------------------------------------------------------------------------------------------------
    ~Animation();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to choose the type of animation to loop
    /// @param _cycle enum class animCycle
    //----------------------------------------------------------------------------------------------------------------------
    void setAnimationTo(animCycle _cycle);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief loads in all of our animation data from required xml files
    /// @param _type enum class animType, specifies object that animation applies to
    //----------------------------------------------------------------------------------------------------------------------
    void loadAnimationData(animType _type);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to force animation data to continously loop chosen cycle
    /// @param _state specifies if animation loop is active/inactive
    /// @param _type enum class animType, specifies object that animation applies to
    //----------------------------------------------------------------------------------------------------------------------
    void setAnimationLoopOn(bool _state, animType _type);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief attaches our animation data to a specified mesh
    /// @param _mesh the mesh to attach animation data to
    /// @param _type enum class animType, specifies object that animation applies to
    //----------------------------------------------------------------------------------------------------------------------
    void attachAnimToMesh(std::unique_ptr<ngl::Obj> const& _mesh, animType _type);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to reset the frame of currently select loop back to start frame
    //----------------------------------------------------------------------------------------------------------------------
    void initStartFrame();  
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to set if animation of specific animation type is active/inactive
    /// @param _update bool used to specify active/inactive state
    /// @param _type enum class animType, specifies object that animation applies to
    //----------------------------------------------------------------------------------------------------------------------
    void setAnimUpdate(int _update,animType _type);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns a bool state of whether animation is active/inactive on speciifc object
    /// @param _type enum class animType, specifies object that animation applies to
    //----------------------------------------------------------------------------------------------------------------------
    bool getAnimUpdate(animType _type);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to increment the current animation frame of specific animation object/type
    /// @param _type enum class animType, specifies object that animation applies to
    //----------------------------------------------------------------------------------------------------------------------
    void incrCurrentFrame(animType _type);

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief holds our character animation data
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::NCCAPointBake> m_characterAnimData;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief holds our coin animation data
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::NCCAPointBake> m_coinAnimData;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current frame value of our character
    //----------------------------------------------------------------------------------------------------------------------
    uint m_charCurrentAnimFrame;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief start frame value of our character
    //----------------------------------------------------------------------------------------------------------------------
    uint m_charAnimStartFrame;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief end frame value of our character
    //----------------------------------------------------------------------------------------------------------------------
    uint m_charAnimEndFrame;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current frame value of our coins
    //----------------------------------------------------------------------------------------------------------------------
    uint m_coinCurrentAnimFrame;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief start frame value of our coins
    //----------------------------------------------------------------------------------------------------------------------
    uint m_coinAnimStartFrame;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief end frame value of our coins
    //----------------------------------------------------------------------------------------------------------------------
    uint m_coinAnimEndFrame;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief animation state of our character
    //----------------------------------------------------------------------------------------------------------------------
    bool m_charAnimUpdate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief animation state of our coin
    //----------------------------------------------------------------------------------------------------------------------
    bool m_coinAnimUpdate;

};

#endif // ANIMATION
