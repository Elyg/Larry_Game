#ifndef CHARACTER_H
#define CHARACTER_H

#include "NGLDraw.h"
#include "PhysicsWorld.h"
#include "CollisionShape.h"
#include "Ltimer.h"

class Camera;

class PhysicsWorld;
//-------------------------------------------------------------------------------------------------------------------------
/// @file Character.h
/// @author Eligijus Titas, Tarquin Pereira
/// @version 1.0
/// @class Character
/// @brief This class manages/creates is for all the character abilities and attributes
//--------------------------------------------------------------------------------------------------------------------------
class Character
{
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for HighScore  class
    //----------------------------------------------------------------------------------------------------------------------
    Character(PhysicsWorld *_physics);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief destructor for HighScore  class
    //----------------------------------------------------------------------------------------------------------------------
    ~Character();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to change the character from ball to leged and back
    //----------------------------------------------------------------------------------------------------------------------
    void shapeshift();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief creates the character at the given position
    /// @param [in] _pos the starting position for the character
    //----------------------------------------------------------------------------------------------------------------------
    void createCharacter(ngl::Vec3 _pos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief creates a jump impulse
    //----------------------------------------------------------------------------------------------------------------------
    void jumpImpulse();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stop the timer for the hop
    //----------------------------------------------------------------------------------------------------------------------
    void stopJumpHopTimer();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief starts the timer for the hop
    //----------------------------------------------------------------------------------------------------------------------
    void startJumpHopTimer();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief detects if character is standing on a mesh
    //----------------------------------------------------------------------------------------------------------------------
    bool detectCollisionForJump();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets camera viewing direction vector
    /// @param [in] _camVector set the camera direction vector
    //----------------------------------------------------------------------------------------------------------------------
    void setCameraInfo(ngl::Vec4 &_camVector);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief makes character move based on the direction vector
    /// @param [in] _move character move direction vector
    //----------------------------------------------------------------------------------------------------------------------
    void characterMove(ngl::Vec3 _move);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief clamps velocity based on name
    /// @param [in] _shape name of the object to clamp velocity
    //----------------------------------------------------------------------------------------------------------------------
    void clampVel(std::string _shape);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief increases the character velocity
    /// @param [in] _shape the character to affect the velocity increase
    //----------------------------------------------------------------------------------------------------------------------
    void speed(std::string _shape);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the direction vector of the character
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Vec3 getMove() {return m_move;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the current mass of the character
    //----------------------------------------------------------------------------------------------------------------------
    inline float getMass() {return m_mass;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the max velocity
    //----------------------------------------------------------------------------------------------------------------------
    inline float getMaxVelocity() {return m_maxVelocity;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the velocity multiplier of the character
    //----------------------------------------------------------------------------------------------------------------------
    inline float getMultiplier() {return m_mulitplier;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns if the character is doing the double jump
    //----------------------------------------------------------------------------------------------------------------------
    inline int getDoubleJump() {return m_doubleJump;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the jump hop time
    //----------------------------------------------------------------------------------------------------------------------
    inline float getJumpHopTime() {return m_jumpHopTime;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the current phase of the object (ball or legged form)
    //----------------------------------------------------------------------------------------------------------------------
    inline bool getPhase() {return m_shapeshift;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gets the velocity of the platform
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Vec3 getPlatformVelocity() {return m_platformVelocity;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enable/disable the characters ability to shapeshift
    //----------------------------------------------------------------------------------------------------------------------
    inline void setShiftable(bool _canShift) {m_shiftable = _canShift;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief turn on cheats (disable gravity for character one in order to debug the levels)
    //----------------------------------------------------------------------------------------------------------------------
    void godMode();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief increment the mass of the character
    //----------------------------------------------------------------------------------------------------------------------
    void setMassPositive();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief decrements the mass of the character
    //----------------------------------------------------------------------------------------------------------------------
    void setMassNegative();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief increments the max velocity of the character
    //----------------------------------------------------------------------------------------------------------------------
    void setMaxVelPositive();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief decrements the max velocity of the character
    //----------------------------------------------------------------------------------------------------------------------
    void setMaxVelNegative();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief increments the multiplier of the velocity of the character
    //----------------------------------------------------------------------------------------------------------------------
    void setMultiplierPositive();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief decrements the multiplier of the velocity of the character
    //----------------------------------------------------------------------------------------------------------------------
    void setMultiplierNegative();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief freezes the character at his current position
    //----------------------------------------------------------------------------------------------------------------------
    void freezeCharacter();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief returns the direction of the gravity of an object
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getGravityDir();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief returns the normal of the collision object that the ray collides with
    /// @param [in] a the first point of the ray
    /// @param [in] b the second point of the ray
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getCollisionNormal(ngl::Vec3 a, ngl::Vec3 b);
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief returns the normal of the collision object that the ray collides with
    /// @param [in] _gravityFactor the multiplier of the gravity
    /// @param [in] _attractForceStr the strength of the force that pulls towards the object
    /// @param [in] _name the name of the shape of the character to make sticky
    //----------------------------------------------------------------------------------------------------------------------
    void attractForce(float _gravityFactor, float _attractForceStr, std::string _name);
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief increments the jump force
    //----------------------------------------------------------------------------------------------------------------------
    void setJumpForcePositive();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief decrements the jump force
    //----------------------------------------------------------------------------------------------------------------------
    void setJumpForceNegative();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief increments the time that the jump force is applied to the character
    //----------------------------------------------------------------------------------------------------------------------
    void setJumpHopMaxTimePositive();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief decrements the time that the jump force is applied to the character
    //----------------------------------------------------------------------------------------------------------------------
    void setJumpHopMaxTimeNegative();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief returns the jump force value
    //----------------------------------------------------------------------------------------------------------------------
    inline float getJumpForce() {return m_jumpForce;}
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief returns the jump hop time
    //----------------------------------------------------------------------------------------------------------------------
    inline int getJumpHopMaxTime() {return m_jumpHopMaxTime;}
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief increment the friction character
    //----------------------------------------------------------------------------------------------------------------------
    void setFrictionPositive();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief decrement the friction of the character
    //----------------------------------------------------------------------------------------------------------------------
    void setFrictionNegative();
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief returns the friction value of the character
    //----------------------------------------------------------------------------------------------------------------------
    inline float getFriction() {return m_friction;}
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief sets the gravity for the character
    /// @param [in] _shape the object to set the gravity to
    /// @param [in] _vec the direction of the gravity
    //----------------------------------------------------------------------------------------------------------------------
    void setGravityForCharacter(std::string _shape, ngl::Vec3 _vec);
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief sets the gravity for the character
    /// @param [in] _cam the object to set the gravity to
    /// @param [in] _charPos the position of the character
    //----------------------------------------------------------------------------------------------------------------------
    void resetCharacter(Camera *_cam, ngl::Vec3 _charPos);
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief turn on or off the stickiness (attraction force)
    /// @param [in] _value enable or disable attarction
    //----------------------------------------------------------------------------------------------------------------------
    void setAttractFlag(bool _value);
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief return the current clamp mode
    //----------------------------------------------------------------------------------------------------------------------
    bool getClampFlag(){ return m_clamp;}
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief sets the clamping on or off
    /// @param [in] _value set the clamping value
    //----------------------------------------------------------------------------------------------------------------------
    void setClampFlag(bool _value);

  private:
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief controls if character can shapeshift or not
    //----------------------------------------------------------------------------------------------------------------------
    bool m_shiftable;
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief the velocity multiplier
    //----------------------------------------------------------------------------------------------------------------------
    float m_mulitplier;
    //---------------------------------------------------------------------------------------------------------------------
    /// @brief the mass of the character
    //----------------------------------------------------------------------------------------------------------------------
    float m_mass;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the maximum velocity variable
    //----------------------------------------------------------------------------------------------------------------------
    float m_maxVelocity;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief camera direction vector
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec4 m_cameraDir;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief holds the pointer to the physics world
    //----------------------------------------------------------------------------------------------------------------------
    PhysicsWorld *m_physics;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the normal of the collision check
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_collisionNormal;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief character position
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_charPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the movement direction vector of the character
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_move;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enables or disables the stickiness (attraction force)
    //----------------------------------------------------------------------------------------------------------------------
    bool m_attractEnable;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the length of the freeze for the character
    //----------------------------------------------------------------------------------------------------------------------
    LTimer m_freezeTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief character in form one name
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_formOne;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief character in form two name
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_formTwo;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer for the amount of time that the space bar is pressed during the characters jump
    //----------------------------------------------------------------------------------------------------------------------
    LTimer jumpHopTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the jumping impulse force
    //----------------------------------------------------------------------------------------------------------------------
    float m_jumpForce;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the maximum time that the jump force can be applied during a single jump
    //----------------------------------------------------------------------------------------------------------------------
    int m_jumpHopMaxTime;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the friction of the character
    //----------------------------------------------------------------------------------------------------------------------
    float m_friction;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the state of the character's double jump
    //----------------------------------------------------------------------------------------------------------------------
    bool m_doubleJump;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the time that the character is jumping for
    //----------------------------------------------------------------------------------------------------------------------
    float m_jumpHopTime;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the velocity of the platform from the previous frame
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_oldPlatformVelocity;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the velocity of the current frame of the platform
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_platformVelocity;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initial position of the ball character
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_initialBallPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief disable or enable the velocity clamp
    //----------------------------------------------------------------------------------------------------------------------
    bool m_clamp;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief character phase (form)
    //----------------------------------------------------------------------------------------------------------------------
    bool m_shapeshift;
};

#endif // CHARACTER_H
