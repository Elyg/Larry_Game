#ifndef LEVEL_H
#define LEVEL_H

#include "NGLDraw.h"
#include "NGLDraw.h"
#include "PhysicsWorld.h"
#include "CollisionShape.h"
#include "Text.h"

class PhysicsWorld;
//-------------------------------------------------------------------------------------------------------------------------
/// @file Level.h
/// @author Rebecca Maddison
/// @version 1.0
/// @class Level
/// @brief This class manages the levels
//--------------------------------------------------------------------------------------------------------------------------
class Level
{
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor of the animation class
    //----------------------------------------------------------------------------------------------------------------------
    Level(PhysicsWorld *_physics);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to create a level mesh
    /// @param _levelName the name that has been given to the level mesh
    /// @param _pos the position that the level should be
    //----------------------------------------------------------------------------------------------------------------------
    void createLevel(std::string _levelName, ngl::Vec3 _pos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief it checks the position of the checkpoints and if the character goes through them saves a new initial position
    /// @param _shapeshift says which character you currently are
    //----------------------------------------------------------------------------------------------------------------------
    void checkpoints(bool _shapeshift);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the initial position
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getInitialPos();
  private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to physics world
    //----------------------------------------------------------------------------------------------------------------------
    PhysicsWorld *m_physics;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initial position of the character
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_initialBallPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to text
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<Text> m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current position of character
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_charPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief name of one form of character
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_formOne;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief name of one form of character
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_formTwo;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief if character has gone through checkpoint 1
    //----------------------------------------------------------------------------------------------------------------------
    bool m_check1;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief if character has gone through checkpoint 2
    //----------------------------------------------------------------------------------------------------------------------
    bool m_check2;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief if character has gone through checkpoint 3
    //----------------------------------------------------------------------------------------------------------------------
    bool m_check3;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief if character has gone through checkpoint 4
    //----------------------------------------------------------------------------------------------------------------------
    bool m_check4;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief if character has gone through checkpoint 5
    //----------------------------------------------------------------------------------------------------------------------
    bool m_check5;

};

#endif // LEVEL_H
